import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import requests
import re

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏° GUI
BG_COLOR = "#000000"
TEXT_COLOR = "#FFFFFF"

# ‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó XSS ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
scan_types = [
    ("Stored Reflected XSS", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏ô URL"),
    ("Stored Event-handler XSS", "‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ event handlers ‡πÄ‡∏ä‡πà‡∏ô onload, onclick, onmouseover, onerror, ‡∏Ø‡∏•‡∏Ø"),
    ("XSS with cookies", "JavaScript ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πÇ‡∏°‡∏¢ cookies ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"),
   
    
]

# Payload ‡πÅ‡∏•‡∏∞‡πÅ‡∏û‡∏ó‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö XSS
XSS_PATTERNS = {
    "Stored Reflected XSS": r"(<script.*?>.*?</script>|<[^>]*?javascript:.*?>)",
    "Stored Event-handler XSS": r"on\w+\s*=\s*['\"].*?['\"]",
    "XSS with cookies": r"(document\.cookie|localStorage\.getItem|sessionStorage\.getItem)",
    

}

RISK_LEVELS = {
    "Stored Reflected XSS": "MEDIUM",
    "Stored Event-handler XSS": "LOW",
    "XSS with cookies": "HIGH",
   
}


COLOR_TAGS = {
    "HIGH": "danger",
    "MEDIUM": "warning",
    "LOW": "safe",
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö XSS
def check_xss(content):
    results = []
    for xss_type, pattern in XSS_PATTERNS.items():
        if scan_check_vars[xss_type].get() == 1:
            matches = re.findall(pattern, content, re.IGNORECASE)
            for match in matches:
                risk = RISK_LEVELS.get(xss_type, "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö")
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó XSS
                if xss_type == "Stored Reflected XSS":
                    description = "‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏≤‡∏Å URL ‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ù‡∏±‡∏á‡∏™‡∏Ñ‡∏•‡∏¥‡∏õ, ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡∏™‡∏π‡πà‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ù‡∏±‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ"
                elif xss_type == "Stored Event-handler XSS":
                    description = "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠ XSS ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ event handlers ‡πÄ‡∏ä‡πà‡∏ô onload, onclick, onmouseover, onerror,"
                elif xss_type == "XSS with cookies":
                    description = "XSS with cookies ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ JavaScript ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πÇ‡∏°‡∏¢ cookies ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πÇ‡∏°‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏ä‡πà‡∏ô authentication tokens ‡πÅ‡∏•‡∏∞ session cookies"
                results.append([xss_type, match, risk, description])
    return results if results else [["‚úÖ ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", "‡πÑ‡∏°‡πà‡∏û‡∏ö XSS", "", ""]]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL
def check_multiple_urls():
    urls = url_entry.get("1.0", "end-1c").strip().split("\n")
    if not urls or urls == [""]:
        messagebox.showwarning("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        return

    results_tree.delete(*results_tree.get_children())
    
    for url in urls:
        url = url.strip()
        if not url:
            continue

        try:
            response = requests.get(url, timeout=5)
            content = response.text
            results = check_xss(content)

            for result in results:
                xss_type, match, risk, description = result
                tag = COLOR_TAGS.get(risk, "safe")
                results_tree.insert("", "end", values=(url, xss_type, match, risk, description), tags=(tag,))

        except requests.exceptions.RequestException as e:
            results_tree.insert("", "end", values=(url, "‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", str(e), "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î URL", ""), tags=("danger",))

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå HTML
def check_file_content():
    file_path = filedialog.askopenfilename(filetypes=[("HTML Files", "*.html"), ("Text Files", "*.txt"), ("All Files", "*.*")])
    if not file_path:
        return

    try:
        with open(file_path, "r", encoding="utf-8", errors="ignore") as file:
            content = file.read()

        results = check_xss(content)
        results_tree.delete(*results_tree.get_children())

        for result in results:
            xss_type, match, risk, description = result
            tag = COLOR_TAGS.get(risk, "safe")
            results_tree.insert("", "end", values=(file_path, xss_type, match, risk, description), tags=(tag,))

    except Exception as e:
        messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå:\n{str(e)}")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
def save_log():
    log_results = []
    for item in results_tree.get_children():
        values = results_tree.item(item, "values")
        log_results.append(" - ".join(values))
    
    if log_results:
        file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
        if file_path:
            with open(file_path, "w", encoding="utf-8") as log_file:
                log_file.write("\n".join(log_results))
            messagebox.showinfo("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå {file_path}")

# Create the main window and setup layout
root = tk.Tk()
root.title("XSS Scanner")
root.geometry("1440x900")
root.configure(bg=BG_COLOR)

header = tk.Label(root, text="üîç ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö XSS", font=("Arial", 18, "bold"), bg=BG_COLOR, fg=TEXT_COLOR)
header.pack(pady=10)

frame_input = tk.LabelFrame(root, text="üîó ‡πÉ‡∏™‡πà URL", font=("Arial", 12), bg=BG_COLOR, fg=TEXT_COLOR)
frame_input.pack(pady=10, padx=20, fill="x")

url_entry = tk.Text(frame_input, font=("Arial", 12), width=90, height=3, bd=2, relief="solid", bg="#222222", fg=TEXT_COLOR)
url_entry.pack(pady=10, padx=20)

check_button = ttk.Button(frame_input, text="‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö URL", command=check_multiple_urls)
check_button.pack(pady=5)

file_button = ttk.Button(frame_input, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå HTML ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", command=check_file_content)
file_button.pack(pady=5)

frame_scan = tk.LabelFrame(root, text="‚öôÔ∏è ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", font=("Arial", 12), bg=BG_COLOR, fg=TEXT_COLOR)
frame_scan.pack(pady=10, padx=20, fill="x")

scan_check_vars = {name: tk.IntVar() for name, _ in scan_types}
for name, desc in scan_types:
    check = tk.Checkbutton(frame_scan, text=name, variable=scan_check_vars[name], font=("Arial", 10), bg=BG_COLOR, fg=TEXT_COLOR, selectcolor="#444")
    check.pack(side="left", padx=10)

frame_results = tk.LabelFrame(root, text="üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", font=("Arial", 12), bg=BG_COLOR, fg=TEXT_COLOR)
frame_results.pack(pady=10, padx=20, fill="both", expand=True)

columns = ("URL/‡πÑ‡∏ü‡∏•‡πå", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", "‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö", "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢", "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢")
results_tree = ttk.Treeview(frame_results, columns=columns, show="headings", style="Treeview")
for col in columns:
    results_tree.heading(col, text=col)
    results_tree.column(col, width=250, anchor="center")

# Define tag colors for different statuses
results_tree.tag_configure("danger", foreground="red")
results_tree.tag_configure("safe", foreground="green")
results_tree.tag_configure("warning", foreground="yellow")

results_tree.pack(pady=5, padx=5, fill="both", expand=True)

save_button = ttk.Button(root, text="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå", command=save_log)
save_button.pack(pady=10)

# Apply dark style to the ttk widgets
style = ttk.Style()
style.configure("TButton", background="#333333", foreground="#ff0000", font=("Arial", 12, "bold"), padding=6)
style.configure("Treeview", background="#000000", foreground=TEXT_COLOR, font=("Arial", 13))
style.configure("Treeview.Heading", background="#333333", foreground="red")

# Start the GUI
# ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤ "lost sys.stdin" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô .exe
import sys
import os

if not sys.stdin:
    sys.stdin = open(os.devnull, 'r')
root.mainloop()
